library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
# Read data
data<-read.csv("..//data/M_sigma.csv",header = T,sep="")
# Prepare data
Msigma<-data.frame(x=log(data$sig_e/200,10),y=data$MBH)
Msigma2<-na.omit(Msigma) # remove NAs
Msigma2<-Msigma2[Msigma2$y>0,] # remove data with MBH=0
# Prepare data to JAGS
jags.data <- list(
x = Msigma2$x,
y = Msigma2$y,
N = nrow(Msigma2)
)
# Normal Model
model.normal<-"model{
#Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dt(0,1,1)
tau~dgamma(1e-3,1e-3)
scat<-1/sqrt(tau)
# Likelihood function
for (i in 1:N){
mu[i]<-beta.0+beta.1*x[i]
y[i]~dnorm(mu[i],tau)
#
# Prediction
prediction[i]~dnorm(mu[i],tau)
}
}"
#inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
inits<-list(beta.0=0,beta.1=0)
params<-c("beta.0","beta.1","scat")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 5000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 20000)
library(rjags)
install.packages("~/Downloads/rjags_4-3-2.tar",type="source")
install.packages("rjags")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
# Read data
data<-read.csv("..//data/M_sigma.csv",header = T,sep="")
# Prepare data
Msigma<-data.frame(x=log(data$sig_e/200,10),y=data$MBH)
Msigma2<-na.omit(Msigma) # remove NAs
Msigma2<-Msigma2[Msigma2$y>0,] # remove data with MBH=0
# Prepare data to JAGS
jags.data <- list(
x = Msigma2$x,
y = Msigma2$y,
N = nrow(Msigma2)
)
# Normal Model
model.normal<-"model{
#Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dt(0,1,1)
tau~dgamma(1e-3,1e-3)
scat<-1/sqrt(tau)
# Likelihood function
for (i in 1:N){
mu[i]<-beta.0+beta.1*x[i]
y[i]~dnorm(mu[i],tau)
#
# Prediction
prediction[i]~dnorm(mu[i],tau)
}
}"
#inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
inits<-list(beta.0=0,beta.1=0)
params<-c("beta.0","beta.1","scat")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 5000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 20000)
install.packages("coda")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 5000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 20000)
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
# Read data
data<-read.csv("..//data/M_sigma.csv",header = T,sep="")
# Prepare data
Msigma<-data.frame(x=log(data$sig_e/200,10),y=data$MBH)
Msigma2<-na.omit(Msigma) # remove NAs
Msigma2<-Msigma2[Msigma2$y>0,] # remove data with MBH=0
# Prepare data to JAGS
jags.data <- list(
x = Msigma2$x,
y = Msigma2$y,
N = nrow(Msigma2)
)
# Normal Model
model.normal<-"model{
#Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dt(0,1,1)
tau~dgamma(1e-3,1e-3)
scat<-1/sqrt(tau)
# Likelihood function
for (i in 1:N){
mu[i]<-beta.0+beta.1*x[i]
y[i]~dnorm(mu[i],tau)
#
# Prediction
prediction[i]~dnorm(mu[i],tau)
}
}"
#inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
inits<-list(beta.0=0,beta.1=0)
params<-c("beta.0","beta.1","scat")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 5000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 20000)
library(coda)
#inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
inits<-list(beta.0=0,beta.1=0)
params<-c("beta.0","beta.1","scat")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
data(prostate,package="ElemStatLearn")
pros <- subset(prostate,select=-train,train==TRUE)
ycol <- which(names(pros)=="lpsa")
x <- as.matrix(pros[-ycol])
y <- pros[[ycol]]
library(lars)
fit <- lars(x,y,type="lasso")
beta <- scale(coef(fit),FALSE,1/fit$normx)
arclength <- rowSums(abs(beta))
library(reshape2)
path <- data.frame(melt(beta),arclength)
names(path)[1:3] <- c("step","variable","standardized.coef")
library(ggplot2)
p <- ggplot(path,aes(arclength,standardized.coef,colour=variable))+
geom_line(aes(group=variable))+
ggtitle("LASSO path for prostate cancer data calculated using the LARS")+
xlim(0,20)
direct.label(p,"lasso.labels")
install.packages("directlabels", repos="http://r-forge.r-project.org")
library(directlabels)
install.packages("directlabels")
data(prostate,package="ElemStatLearn")
pros <- subset(prostate,select=-train,train==TRUE)
ycol <- which(names(pros)=="lpsa")
x <- as.matrix(pros[-ycol])
y <- pros[[ycol]]
library(lars)
fit <- lars(x,y,type="lasso")
beta <- scale(coef(fit),FALSE,1/fit$normx)
arclength <- rowSums(abs(beta))
library(reshape2)
path <- data.frame(melt(beta),arclength)
names(path)[1:3] <- c("step","variable","standardized.coef")
library(ggplot2)
p <- ggplot(path,aes(arclength,standardized.coef,colour=variable))+
geom_line(aes(group=variable))+
ggtitle("LASSO path for prostate cancer data calculated using the LARS")+
xlim(0,20)
direct.label(p,"lasso.labels")
require(directlabels)
data(prostate,package="ElemStatLearn")
pros <- subset(prostate,select=-train,train==TRUE)
ycol <- which(names(pros)=="lpsa")
x <- as.matrix(pros[-ycol])
y <- pros[[ycol]]
library(lars)
fit <- lars(x,y,type="lasso")
beta <- scale(coef(fit),FALSE,1/fit$normx)
arclength <- rowSums(abs(beta))
library(reshape2)
path <- data.frame(melt(beta),arclength)
names(path)[1:3] <- c("step","variable","standardized.coef")
library(ggplot2)
p <- ggplot(path,aes(arclength,standardized.coef,colour=variable))+
geom_line(aes(group=variable))+
ggtitle("LASSO path for prostate cancer data calculated using the LARS")+
xlim(0,20)
direct.label(p,"lasso.labels")
data(prostate,package="ElemStatLearn")
pros <- subset(prostate,select=-train,train==TRUE)
ycol <- which(names(pros)=="lpsa")
x <- as.matrix(pros[-ycol])
y <- pros[[ycol]]
library(lars)
fit <- lars(x,y,type="lasso")
beta <- scale(coef(fit),FALSE,1/fit$normx)
arclength <- rowSums(abs(beta))
library(reshape2)
path <- data.frame(melt(beta),arclength)
names(path)[1:3] <- c("step","variable","standardized.coef")
library(ggplot2)
p <- ggplot(path,aes(arclength,standardized.coef,colour=variable))+
geom_line(aes(group=variable))+
ggtitle("LASSO path for prostate cancer data calculated using the LARS")+
xlim(0,20)
direct.label(p,"lasso.labels")
install.packages("rjags")
plic <- installed.packages(.Library, priority = "high", fields = "License")
plic
installed.packages()[,c(1,4)]
installed.packages()[,c(1)]
installed.packages()[,1]
installed.packages()[,c(1,4)]
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="~/Desktop/installed_packages.rda")
tmp = installed.packages()
installedpackages = as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpackages, file="~/Desktop/installed_packages2.rda")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(coda)
install.packages("rjags")
install.packages("rjags",type="source")
install.packages("rjags")
library("rjags")
# JAGS Normal Model with errors
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(coda)
install.packages("ggmcmc")
install.packages("ggmcmc",type="source")
install.packages("dplyr")
install.packages("dplyr",type="source")
library(ggplot2)
install.packages("dplyr")
devtools::install_github("hadley/dplyr")
require(devtools)
install.packages("devtools")
install.packages("ggmcmc")
devtools::install_github("hadley/dplyr")
devtools::install_github("hadley/dplyr",lib="/Users/rafael/Library/R/3.2/library")
R.Version()
install.packages("installr")
R.Version()
install.packages("ggplot2")
install.packages("ggplot2",type="source")
devtools::install_github("hadley/ggplot2")
library(ggplot2)
67/5
67/12
v<-c(1,3,2)
v(1)
v
v[1]
v[2]
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/GLM_AGN/script")
require(arm)
require(plyr)
library(caret)
library(pROC)
require(kernlab)
library(e1071)
require(rpart)
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE,sep="")
AGN_data
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data[1,]
colnames(AGN_data)
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
nonlinear.svm <- ksvm(agn_type~x_bpt+y_bpt, data=AGN_data, type='spoc-svc', kernel='rbf',
kpar=list(sigma=1), C=100, scale=c() )
plot( nonlinear.svm, data=AGN_data )
nonlinear.svm
AGN_data$agn_type
nonlinear.svm
plot( nonlinear.svm, data=AGN_data )
nonlinear.svm <- ksvm(agn_type~x_bpt+y_bpt, data=AGN_data, kernel='rbf',
kpar=list(sigma=1), C=100, scale=c() )
plot( nonlinear.svm, data=AGN_data )
AGN_data$x_bpt
min(AGN_data$x_bpt)
min(AGN_data$y_bpt)
hist(AGN_data$x_bpt)
max(AGN_data$x_bpt)
range(AGN_data$y_bpt)
range(AGN_data$x_bpt)
AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 2
AGN_data <- AGN_data[AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 2,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-2 & AGN_data$y_bpt<= 2,]
nonlinear.svm <- ksvm(agn_type~x_bpt+y_bpt, data=AGN_data, kernel='rbf',
kpar=list(sigma=1), C=100, scale=c() )
plot( nonlinear.svm, data=AGN_data )
nonlinear.svm <- ksvm(agn_type~x_bpt+y_bpt, data=AGN_data, cost = 100, gama = 1)
plot( nonlinear.svm, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
range(AGN_data$y_bpt)
AGN_data <- AGN_data[AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 2,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-2 & AGN_data$y_bpt<= 2,]
nonlinear.svm <- ksvm(agn_type~x_bpt+y_bpt, data=AGN_data, cost = 100, gama = 1)
plot( nonlinear.svm, data=AGN_data )
nonlinear.svm
fitted(nonlinear.svm)
library(e1071)
nonlinear.svm <- svm(agn_type~x_bpt+y_bpt, data=AGN_data, cost = 100, gama = 1)
plot( nonlinear.svm, data=AGN_data )
nonlinear.svm
plot( nonlinear.svm,x_bpt~y_bpt, data=AGN_data )
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data, cost = 100, gama = 1)
plot( nonlinear.svm,y_bpt+x_bpt, data=AGN_data )
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data, cost = 100, gama = 1)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-5 & AGN_data$x_bpt<= 5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-5 & AGN_data$y_bpt<= 5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-1.5 & AGN_data$x_bpt<= 1.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1.5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data$F_nii
AGN_data$F_Halpha
AGN_data$F_nii!-999
AGN_data$F_nii!=-999
AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999
summary(AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999)
summary(AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
range(AGN_data$x_bpt)
range(AGN_data$y_bpt)
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-1.5 & AGN_data$x_bpt<= 1.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1.5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-1.5 & AGN_data$x_bpt<= 1.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1.5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii!=-999 & AGN_data$F_Halpha !=-999 &
AGN_data$F_oiii !=-999 & AGN_data$F_Hbeta !=-999,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data
AGN_data$y_bpt
AGN_data$F_Halpha
AGN_data$F_nii
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-1.5 & AGN_data$x_bpt<= 1.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1.5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-1.5 & AGN_data$x_bpt<= 1.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1.5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 0.5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 1,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 1,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-1.5 & AGN_data$y_bpt<= 2,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data )
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,0.5),ylim=c(-1.5,2))
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,1.5),ylim=c(-1.5,2.5))
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-2 & AGN_data$x_bpt<= 2,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-2 & AGN_data$y_bpt<= 2,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,1.5),ylim=c(-1.5,2.5))
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-5 & AGN_data$x_bpt<= 5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-5 & AGN_data$y_bpt<= 5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,1.5),ylim=c(-1.5,2.5))
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
#AGN_data <- AGN_data[AGN_data$x_bpt>=-5 & AGN_data$x_bpt<= 5,]
#AGN_data <- AGN_data[AGN_data$y_bpt>=-5 & AGN_data$y_bpt<= 5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,1.5),ylim=c(-1.5,2.5))
AGN_data<-read.csv("../data/output_xray.csv",header=TRUE)
AGN_data<-AGN_data[AGN_data$F_nii>0 & AGN_data$F_Halpha > 0 &
AGN_data$F_oiii > 0 & AGN_data$F_Hbeta > 0,]
AGN_data$x_bpt <- AGN_data$F_nii/AGN_data$F_Halpha
AGN_data$y_bpt <- AGN_data$F_oiii/AGN_data$F_Hbeta
AGN_data <- AGN_data[AGN_data$x_bpt>=-5 & AGN_data$x_bpt<= 5,]
AGN_data <- AGN_data[AGN_data$y_bpt>=-5 & AGN_data$y_bpt<= 5,]
nonlinear.svm <- svm(agn_type~y_bpt+x_bpt, data=AGN_data)
plot( nonlinear.svm,y_bpt~x_bpt, data=AGN_data,xlim=c(-1,1.5),ylim=c(-1.5,2.5))
