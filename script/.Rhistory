as.mcmc.list(jags.logit, vars="Fit")[[1]][1,]
as.mcmc.list(jags.logit, vars="Fit")[[1]][1:10,]
as.mcmc.list(jags.logit, vars="Fit")[[1]]$Fit
as.mcmc.list(jags.logit, vars="Fit")[[1]][,1]
mean(as.mcmc.list(jags.logit, vars="Fit")[[1]][,1]<as.mcmc.list(jags.logit, vars="Fit")[[1]][,2])
plot(data.2$baryon_fraction,Pres)
>>>>>>> Stashed changes
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  JAGS script  Scape_Fraction.R
#  Copyright (C) 2015  Rafael S. de Souza
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 3 as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
#
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
trainIndex <- createDataPartition(data.1$redshift, p = .3,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
#X<-model.matrix(~Mvir+baryon_fraction+age_star_mean+ssfr_gas+NH_10+redshift,data=data.2)
X<-model.matrix(~QHI,data=data.2)
# Scale
K<-ncol(X)
jags.data <- list(Y= data.2$Y,
N = nrow(data.2),
X=X,
b0 = rep(0,K),
B0=diag(1e-4,K),
Npred = K
)
model<-"model{
#1. Priors
beta~dmnorm(b0[],B0[,]) # Normal Priors
# Jefreys priors for sparseness
#for(j in 1:Npred)   {
#      lnTau[j] ~ dunif(-50, 50)
#      TauM[j] <- exp(lnTau[j])
#      beta[j] ~ dnorm(0, TauM[j])
#     Ind[j] <- step(abs(beta[j]) - 0.05)
#}
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbern(pi[i])
logit(pi[i]) <-  eta[i]
eta[i] <- inprod(beta[], X[i,])
#3. Prediction
NewPred[i]~dbern(pi[i])
}
}"
params <- c("beta","pi","NewPred")
inits0  <- function () {
list(beta = rnorm(K, 0, 0.1))}
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(6)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
jagssamples <- as.mcmc.list(jags.logit)
prediction<-summary(as.mcmc.list(jags.logit,vars="NewPred"))
prediction<-prediction$quantiles
probability<-summary(as.mcmc.list(jags.logit,vars="pi"))
prob<-probability$quantiles
ROC<-roc(prob[,3], data.2$Y)
plot(ROC)
jagssamples
fit=glm(Y~QHI,data=data.2,family="logit")
fit=glm(Y~QHI,data=data.2,family=binomial)
plot(fit)
curve(predict(fit,type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
curve(predict(fit,data.frame(data.2$QHI=x),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
curve(predict(fit,data.frame(data.2$QHI=x),type="resp"),add=TRUE)
data.2$QHI
curve(predict(fit,data.frame(data.2$QHI),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
curve(predict(fit,data.frame(x=data.2$QHI),type="resp"),add=TRUE) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
plot(y=predict(fit,type="resp"),x=data.2$QHI,add=TRUE) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
plot(y=predict(fit,type="resp"),x=data.2$QHI) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,fitted(fit),pch=20)
plot(y=predict(fit,type="resp"),x=data.2$QHI)
plot(y=predict(fit,type="resp"),x=data.2$QHI) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,data.2$Y,pch=20)
data.2$Y
plot(y=predict(fit,type="resp"),x=data.2$QHI) # draws a curve based on prediction from logistic regression model
points(data.2$QHI,data.2$Y,pch=20)
gdata<-as.data.frame(y=predict(fit,type="resp"),x=data.2$QHI)
gdata<-as.data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
gdata<-as.data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=data.2$QHI,y=data.2$Y)
)
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=x,y=y))
gdata
gdata[1,]
gdata<-data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
gdata
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=x,y=y))
trainIndex <- createDataPartition(data.1$redshift, p = .4,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
#data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
#X<-model.matrix(~Mvir+baryon_fraction+age_star_mean+ssfr_gas+NH_10+redshift,data=data.2)
X<-model.matrix(~QHI,data=data.2)
# Scale
K<-ncol(X)
jags.data <- list(Y= data.2$Y,
N = nrow(data.2),
X=X,
b0 = rep(0,K),
B0=diag(1e-4,K),
Npred = K
)
model<-"model{
#1. Priors
beta~dmnorm(b0[],B0[,]) # Normal Priors
# Jefreys priors for sparseness
#for(j in 1:Npred)   {
#      lnTau[j] ~ dunif(-50, 50)
#      TauM[j] <- exp(lnTau[j])
#      beta[j] ~ dnorm(0, TauM[j])
#     Ind[j] <- step(abs(beta[j]) - 0.05)
#}
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbern(pi[i])
logit(pi[i]) <-  eta[i]
eta[i] <- inprod(beta[], X[i,])
#3. Prediction
NewPred[i]~dbern(pi[i])
}
}"
params <- c("beta","pi","NewPred")
inits0  <- function () {
list(beta = rnorm(K, 0, 0.1))}
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(6)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1000,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
fit=glm(Y~QHI,data=data.2,family="logit")
gdata<-data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=x,y=y))
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
trainIndex <- createDataPartition(data.1$redshift, p = .4,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
#data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
fit=glm(Y~QHI,data=data.2,family="logit")
gdata<-data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
fit=glm(Y~QHI,data=data.2,family=binomial)
gdata<-data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=x,y=y))
library(popbio)
logi.hist.plot(data.2$QHI,data.2$Y,boxp=FALSE,type="hist",col="gray")
install.packages("popbio")
library(popbio)
logi.hist.plot(data.2$QHI,data.2$Y,boxp=FALSE,type="hist",col="gray")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
logi.hist.plot(data.2$QHI,data.2$Y,boxp=FALSE,type="hist",col="gray")
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
logi.hist.plot(data.2$QHI,data.2$Y,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=FALSE,type="hist",col="gray")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=FALSE,type="hist",col="gray")
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=FALSE,type="hist",col="gray")
data.2$baryon_fraction
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=FALSE,type="hist",col="gray")
data.2$baryon_fraction
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data.2$ssfr_stars,data.2$Y,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=FALSE,type="hist",col="gray")
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=T,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]))
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=T,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.5]<-1
data.2$Y[data.2$Y<0.5]<-0
logi.hist.plot(data.2$ssfr_gas,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
fit=glm(Y~QHI,data=data.2,family=binomial)
gdata<-data.frame(pi=predict(fit,type="resp"),x=data.2$QHI,y=data.2$Y)
ggplot(gdata,aes(x=x,y=pi))+geom_line()+geom_point(data=gdata,aes(x=x,y=y))
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  JAGS script  Scape_Fraction.R
#  Copyright (C) 2015  Rafael S. de Souza
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 3 as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
#
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
trainIndex <- createDataPartition(data.1$redshift, p = .9,
list = FALSE,
times = 1)
#data.2<-data.1[data.1$redshift==8.86815,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
library(popbio)
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
library(popbio)
logi.hist.plot(data.2$baryon_fraction,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(sSFR[gas]),ylabel="Probability")
runif(10,0,100)
x<-runif(10,0,100)
x/sum(x)
sum(x/sum(x))
x<-runif(10,0,100)
x2<-x/sum(x)
sum(x2)
x2<-100°x/sum(x)
sum(x2)
x<-runif(10,0,100)
x2<-100*x/sum(x)
sum(x2)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/GLM_AGN/script")
# Logit regression with AGNs
require(arm)
require(plyr)
library(caret)
library(pROC)
AGN_data<-read.table("../data/outputdata.txt",header=TRUE,sep="")
AGN_data$WHAN_Class<-as.factor(AGN_data$WHAN_Class)
AGN_data$WHAN_Class<-revalue(AGN_data$WHAN_Class,c("2"="1","3"="1","1"="0","4"="0"))
fit<-bayesglm(WHAN_Class~log10.NII.Ha.+log10.EW.Ha..,family=binomial(link="logit"),scaled=TRUE,
data = AGN_data)
ROCF<- data.frame(True=AGN_data$WHAN_Class,predicted=predict(fit,type = "response"))
F1 <-roc(ROCF$True,ROCF$predicted)
coords(F1,x="best")[1]
ROCF$class<-ROCF$predicted
ROCF$class[which(ROCF$class>=coords(F1,x="best")[1])]<-1
ROCF$class[which(ROCF$class<coords(F1,x="best")[1])]<-0
confusionMatrix(ROCF$True, ROCF$class)
x <-range(AGN_data$log10.NII.Ha.)
x <- seq(x[1], x[2], length.out=50)
y <- range(AGN_data$log10.EW.Ha..)
y <- seq(y[1], y[2], length.out=50)
z <- outer(x,y,
function(log10.NII.Ha.,log10.EW.Ha..)
predict(fit, data.frame(log10.NII.Ha.,log10.EW.Ha..),type = 'response'))
library(rsm)
library(lattice)
YlOrBr <- c("#FFFFD4", "#FED98E", "#FE9929", "#D95F0E", "#993404")
#p<-persp(x,y,z, theta=150, phi=20,
#         expand = 0.5,shade = 0.1,
#         xlab="Z", ylab=expression(NII.Ha), zlab=expression(log10.EW.Ha),ticktype='detailed',
#         col = YlOrBr,border=NA,xlog=T,ylog=T)
#cor = topo.colors(200)
trellis.par.set("axis.line",list(axis.text=list(cex=20),col=NA,lty=1,lwd=2))
par(mar=c(1,1,1,1))
wireframe(z~x+y,data=data.frame(x=x, y=rep(y, each=length(x)), z=z),
par.settings = list(regions=list(alpha=0.4)),
col.regions =cor,drape=T,light.source = c(5,5,5),colorkey = FALSE,
xlab=list(label=expression(log10.NII.Ha.),cex=1.25), ylab=list(label=expression(log10.EW.Ha..),cex=1.25),
zlab=list(rot=90,label=expression(pi),cex=1.25,dist=-1,rot=0),
scale=list(tck=0.75,arrows=FALSE,distance =c(0.75, 0.75, 0.75)))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/WHAN_Clustering/script")
require(plyr)
library(caret)
require(kernlab)
library(e1071)
require(MASS)
require(mclust)
AGN_data<-read.table("../data/sample_WHAN_BPT_rafa.dat",header=F,sep="")
AGN_data[1,]
WHAN<-AGN_data[,c(9,10,11)]
WHAN$WHAN_Class<-as.factor(WHAN$WHAN_Class)
colnames(WHAN)<-c("x_WHAN","y_WHAN","class_WHAN")
WHAN$class_WHAN<-as.factor(WHAN$class_WHAN)
WHAN[1,]
plot(x_WHAN,y_WHAN,data=WHAN)
plot(WHAN$x_WHAN,WHAN$y_WHAN)
plot(WHAN$x_WHAN,WHAN$y_WHAN,xlim=c(-1.5,0.5),ylim=c(-0.5,2))
plot(WHAN$x_WHAN,WHAN$y_WHAN)
